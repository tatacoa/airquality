#!/usr/bin/env python3
'''
@Autor: Ana Maria Sandoval Jimenez
'''

from pprint import pprint
import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pylab
import seaborn as sns
plt.style.use('fivethirtyeight')
pylab.rcParams['figure.figsize'] = (10.0,8.0)

import warnings
warnings.filterwarnings("ignore")
import seaborn as sns
###################import pandas_profiling
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split
# load preprocesed train test files
try:
    train = pd.read_csv(sys.argv[1])
    test = pd.read_csv(sys.argv[2])
except IndexError:
    print("usage: linear-reg TRAIN-FILE TEST-FILE")
    sys.exit(1)
                    
#Training a Linear Regression Model
print('Train shape: ', train.shape)
print('Test  shape: ', test.shape)
print(" ")
print('Train columns: ')
pprint(train.columns)
print('Train columns: ')
pprint(test.columns)

y = train['mortality_rate']
X = train.drop(['mortality_rate'], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 101)

lm = LinearRegression()
lm.fit(X_train,y_train)

#Model evaluation
print(lm.intercept_)
coeff_train = pd.DataFrame(lm.coef_,X_train.columns, columns=['Coefficient'])
print(coeff_train)

# Predictions
predictions = lm.predict(X_test)

# Metrics
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))
