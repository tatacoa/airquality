#!/usr/bin/env python3
'''
@Autor: Ana Maria Sandoval Jimenez
'''

from pprint import pprint
import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pylab
import seaborn as sns; sns.set()
plt.style.use('fivethirtyeight')
pylab.rcParams['figure.figsize'] = (10.0,8.0)

import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings("ignore")
###################import pandas_profiling
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.cross_validation import cross_val_score

from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
# load preprocesed train test files
try:
    train = pd.read_csv(sys.argv[1])
    test = pd.read_csv(sys.argv[2])
except IndexError:
    print("usage: linear-reg TRAIN-FILE TEST-FILE")
    sys.exit(1)
                    
#Training a Linear Regression Model
print('Train shape: ', train.shape)
print('Test  shape: ', test.shape)
print(" ")
print('Train columns: ')
pprint(train.columns)
print('Train columns: ')
pprint(test.columns)

y = train['mortality_rate']
X = train.drop(['mortality_rate'], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 101)

lm = LinearRegression()
lm.fit(X_train,y_train)

#Model evaluation
print(lm.intercept_)
coeff_train = pd.DataFrame(lm.coef_,X_train.columns, columns=['Coefficient'])
print(coeff_train)

# Predictions
predictions = lm.predict(X_test)

# Metrics
print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

# Model validation via cross-validation
print('Cross validation Score:')
score = cross_val_score(lm, X, y, cv=5)
print(score)
print('CV mean: ', score.mean())

# Set the parameters by cross-validation
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report
from sklearn import svm

tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],
                     'C': [1, 10, 100, 1000]},
                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]

scores = ['precision', 'recall']
svc = svm.SVC(gamma="scale")
for score in scores:
    print("# Tuning hyper-parameters for %s" % score)
    print()

    clf = GridSearchCV(svc, tuned_parameters, cv=5,
                       scoring='%s_macro' % score)
    clf.fit(X_train, y_train)

    print("Best parameters set found on development set:")
    print()
    print(clf.best_params_)
    print()
    print("Grid scores on development set:")
    print()
    means = clf.cv_results_['mean_test_score']
    stds = clf.cv_results_['std_test_score']
    for mean, std, params in zip(means, stds, clf.cv_results_['params']):
        print("%0.3f (+/-%0.03f) for %r"
              % (mean, std * 2, params))
    print()

    print("Detailed classification report:")
    print()
    print("The model is trained on the full development set.")
    print("The scores are computed on the full evaluation set.")
    print()
    y_true, y_pred = y_test, clf.predict(X_test)
    print(classification_report(y_true, y_pred))
    print()
